package me.moonote.app.chatkeep.security;

import java.io.IOException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import me.moonote.app.chatkeep.model.User;
import me.moonote.app.chatkeep.model.UserType;
import me.moonote.app.chatkeep.repository.UserRepository;

/**
 * Security filter that handles anonymous user authentication via UUID.
 *
 * This filter: 1. Extracts the anonymous UUID from the request header (X-Anonymous-User-Id) 2.
 * Finds or creates an anonymous user in the database 3. Sets the Spring Security context with
 * anonymous user details
 *
 * The UUID is generated by the frontend (crypto.randomUUID()) and stored in browser LocalStorage.
 */
@Component
@RequiredArgsConstructor
@Slf4j
public class AnonymousUserFilter extends OncePerRequestFilter {

  private final UserRepository userRepository;

  private static final String ANONYMOUS_USER_HEADER = "X-Anonymous-User-Id";

  @Override
  protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response,
      FilterChain filterChain) throws ServletException, IOException {

    // Only process if no authentication exists (anonymous users)
    if (SecurityContextHolder.getContext().getAuthentication() == null
        || !SecurityContextHolder.getContext().getAuthentication().isAuthenticated()) {

      String anonymousUuid = request.getHeader(ANONYMOUS_USER_HEADER);

      if (anonymousUuid != null && !anonymousUuid.isBlank()) {
        try {
          // Find or create anonymous user
          User user = findOrCreateAnonymousUser(anonymousUuid);

          // Create authentication token
          ChatKeepUserDetails userDetails = new ChatKeepUserDetails(user);
          UsernamePasswordAuthenticationToken authentication =
              new UsernamePasswordAuthenticationToken(userDetails, null,
                  userDetails.getAuthorities());
          authentication.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));

          // Set authentication in security context
          SecurityContextHolder.getContext().setAuthentication(authentication);

          log.debug("Anonymous user authenticated: {}", anonymousUuid);
        } catch (Exception e) {
          log.error("Failed to authenticate anonymous user: {}", anonymousUuid, e);
        }
      }
    }

    filterChain.doFilter(request, response);
  }

  /**
   * Find existing anonymous user or create a new one.
   */
  private User findOrCreateAnonymousUser(String anonymousUuid) {
    return userRepository.findByAnonymousUuid(anonymousUuid).orElseGet(() -> {
      // Create new anonymous user
      User newUser = User.builder().anonymousUuid(anonymousUuid).userType(UserType.ANONYMOUS)
          .username("Anonymous User").build();

      return userRepository.save(newUser);
    });
  }

}
